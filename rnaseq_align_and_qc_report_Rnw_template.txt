total.read.data <- read.table(paste(curr.batch,"_read_counts.txt", sep=""), header=T, sep="\t")
metrics.data <- read.table(paste(curr.batch,"_rnaseqmetrics_hist.txt", sep=""), header=T)
counts.data <- read.table(paste(curr.batch,"_counts.txt", sep=""), header=T, sep="\t")
ercc.data <- read.table(paste(curr.batch,"_ERCC.txt", sep=""), header=T, as.is=T)
summary.data <- read.table(paste(curr.batch,"_rnaseqmetrics_summary.txt", sep=""), header=T, as.is=T, sep="\t")
bamstats.data <- read.table(paste(curr.batch,"_bamstats_counts.txt", sep=""), header=T, as.is=T, sep="\t")
if (library.type %in% c("PE", "SPE")) {
   insert.summary.data <- read.table(paste(curr.batch,"_insertmetrics_summary.txt", sep=""), header=T, as.is=T, sep="\t")
   insert.metrics.data <- data.frame(c(0:1))
   names(insert.metrics.data) <- "Insert_Size"
   for (i in c(1:length(sample.names))){
       curr.hist.data <- read.table(paste(curr.batch,"_",sample.names[i],"_insertmetrics_hist.txt", sep=""), header=T, as.is=T, sep="\t")
       		      insert.metrics.data <- merge(insert.metrics.data, curr.hist.data, all=TRUE)
		      			  }
					  }
unique.counts.data <- read.table(paste(curr.batch,"_unique_counts.txt", sep=""), header=T, sep="\t")
duplicates <- read.table(paste(curr.batch,"_duplicates.txt", sep=""), header=T, sep="\t", as.is=T)
@

<H1>
PCPGM RNA-Seq Bioinformatics Report of Sample QC and Alignment Summary Statistics
</H1>

<<id,echo=FALSE>>=
HTML(paste("Batch: ",curr.batch,"<br> Author: Blanca Himes (blanca.himes@channing.harvard.edu)", sep=""))
@


For each sample, the following programs were run to generate the data necessary to create this report. Written as for unstranded paired-end data. For single-end reads, R2s and insert size metrics would be omitted. For stranded data, Tophat and Cufflinks option --library-type fr-firststrand would be used and CollectRnaSeqMetrics.jar option STRAND_SPECIFICITY=SECOND_READ_TRANSCRIPTION_STRAND would be used.<br>
<blockquote>
java -Xmx1024m  TrimmomaticPE -phred33 [raw_sample_R1] [raw_sample_R2] [sample_R1] [sample_R1_unpaired] [sample_R2] [sample_R2_unpaired] HEADCROP:[bases to trim, if any] ILLUMINACLIP:[sample_primer_fasta]:2:30:10 MINLEN:50
fastqc [sample_R1] [sample_R2] <br>
cat [sample_R1/R2] | awk '((NR-2)%4==0){read=$1;total++;count[read]++}END{for(read in count){if(count[read]==1){unique++}};print total,unique,unique*100/total}' <br>

</blockquote>
If "No Discovery" TopHat options were selected (conservative alignment): <br>
<blockquote>
tophat --library-type fr-unstranded -G [ref+ERCC gtf] --no-novel-juncs --transcriptome-only -p 12 [ref_genome_index] [sample_R1] [sample_R2] <br>
</blockquote>
If default TopHat options were selected: <br>
<blockquote>
tophat --library-type fr-unstranded -G [ref+ERCC gtf] -p 12 [ref_genome_index] [sample_R1] [sample_R2] <br>
</blockquote>

Using TopHat output files accepted_hits.bam and unmapped.bam:<br>
<blockquote>
samtools sort accepted_hits.bam accepted_hits.sorted <br>
samtools index accepted_hits.sorted.bam <br>
samtools idxstats accepted_hits.sorted.bam > accepted_hits.sorted.stats <br>
bamtools stats -in accepted_hits.sorted.bam > accepted_hits.sorted.bamstats <br>
bamtools filter -in accepted_hits.sorted.bam -script cigarN.script | bamtools count <br>
samtools view -c unmapped.bam <br>
java -Xmx2g -jar CollectRnaSeqMetrics.jar REF_FLAT=[ref_flat file] STRAND_SPECIFICITY=NONE INPUT=accepted_hits.bam OUTPUT=RNASeqMetrics <br>
java -Xmx2g -jar CollectInsertSizeMetrics.jar HISTOGRAM_FILE=InsertSizeHist.pdf INPUT=accepted_hits.sorted.bam OUTPUT=InsertSizeMetrics <br>
</blockquote>

If ERCC Spike-Ins were used: <br>
<blockquote>
cufflinks -G [ERCC .gtf file] -p 12 accepted_hits.bam <br>
</blockquote>

<H2>
Summary Read Numbers for Each Sample
</H2>

The number of raw reads correspond to those that passed Casava QC filters, were trimmed to remove adaptors by Trimmomatic, and were aligned by TopHat to ref_genome+ERCC transcripts as reported in .info files. Unique read counts were obtained by using awk on trimmed fastq files. FastQC duplication level estimates were retrieved from fastqc_data.txt files. Bamtools statistics were based on sorted and indexed bam files. The mapped reads were those that mapped to reference and were output by TopHat to accepted_hits.bam. The unmapped reads were output by TopHat to unmapped.bam. Some reads may be mapped to multiple locations in the genome so that the number of total reads reported by bamstats may be greater than the number of raw reads. The Junction spanning reads are computed based on accepted_hits.bam CIGAR entries containing "N." Related text files that were saved:
<<count.files,echo=FALSE>>=
HTML(paste(curr.batch, "_read_counts.txt <br>", curr.batch, "_duplicates.txt <br>", curr.batch, "_unique_counts.txt <br>", curr.batch, "_bamstats_counts.txt <br><br>", sep=""))
@


<<unique.read.table,echo=FALSE>>=
library(xtable)
if (library.type %in% c("PE", "SPE")) {
   R1_dups = duplicates[1, seq(2, length(duplicates[1, ]), 2)]
   unique.counts.data.2 <- cbind(unique.counts.data, t(R1_dups))
   R2_dups = duplicates[1, seq(3, length(duplicates[1, ]), 2)]	
   unique.counts.data.2 <- cbind(unique.counts.data.2, t(R2_dups))
   row.names(unique.counts.data.2) <- c(1:length(row.names(unique.counts.data.2)))
   names(unique.counts.data.2)[c(8:9)] <- c("Fastqc_Total_Duplicate_Estimate_R1", "Fastqc_Total_Duplicate_Estimate_R2")
   } else {
   unique.counts.data.2 <- cbind(unique.counts.data, t(duplicates[1, c(2:length(duplicates[1, ]))]))
   row.names(unique.counts.data.2) <- c(1:length(row.names(unique.counts.data.2)))
   names(unique.counts.data.2)[5] <- "Fastqc_Total_Duplicate_Estimate"
   }
print(xtable(unique.counts.data.2, caption="Total Number of Raw Reads Summary"), type="html", label="tab:zero", table.placement="tbp", caption.placement="top")
@

<<unique.read.plot,echo=FALSE,results=hide,fig=FALSE>>=
png(paste("Unique_Reads_",curr.batch,".png", sep=""), width=4, height=3, units="in", pointsize=6, res=300)
par(mai=c(0.5,0.5,0.5,1))
if (library.type %in% c("PE", "SPE")) {
   unique.counts.only = rbind(unique.counts.data$R1_Percent_Unique, unique.counts.data$R2_Percent_Unique)
   barplot(unique.counts.only, beside=TRUE, ylim=c(0,100), col=c("red", "darkblue"), border=NA, main=curr.batch, xlab="Sample", ylab="Percentage of Unique Reads in Original Fastq File", names.arg=c(1:length(unique.counts.data$Sample)), cex.axis=0.9)
   legend("right", c("R1", "R2"), fill=c("red", "darkblue"), border=NA, bty="n", xpd=TRUE, inset=-0.3, cex=1)
   } else {
   barplot(unique.counts.data$Percent_Unique, ylim=c(0,100), col=c("red"), border=NA, main=curr.batch, xlab="Sample", ylab="Percentage of Unique Reads in Original Fastq File", names.arg=c(1:length(unique.counts.data$Sample)), cex.axis=0.9)
   }
dev.off()
HTML(paste("<OBJECT data=\"Unique_reads_",curr.batch,".png\" type=\"image/png\">\n</OBJECT>\n", sep=""))
@

<<duplicate.read.plot,echo=FALSE,results=hide,fig=FALSE>>=
color.list <- rep(brewer.pal(12,"Paired"), length(sample.names))
png(paste("Sample_Duplication_",curr.batch,".png", sep=""),  width=4, height=3, units="in", pointsize=6, res=300)
par(mai=c(0.5,0.5,0.5,1))
if (library.type %in% c("PE", "SPE")) {
   for (i in seq(1, 2*length(sample.names), 2)){
         sample.index <- i+1
	 	        if (i==1) {
			   	   plot(duplicates[-1, sample.index], col=color.list[i], type="o", xlab="Sequence Duplication Level", ylab="Relative Scale Where Single Reads Have Value 100", main=curr.batch, ylim=c(0, max(c(100, ceiling(max(duplicates[11, -1]))))))
				   		       		       lines(duplicates[-1, sample.index+1], col=color.list[i], type="o")
								       			      } else {
											      	      lines(duplicates[-1, sample.index], col=color.list[i], type="o")
												      			   		   lines(duplicates[-1, sample.index+1], col=color.list[i], type="o")
																	   			  }
																				  }
																				  legend("right", sample.names, fill=color.list[seq(1, 2*length(sample.names), 2)], bty="n", border=color.list[seq(1, 2*length(sample.names), 2)], cex=0.6, xpd=TRUE, inset=-0.2)
																				  } else {
																				  for (i in seq(1, length(sample.names))){
																				        sample.index <- i+1
																						       if (i==1) {
																						       	  	  plot(duplicates[-1, sample.index], col=color.list[i], type="o", xlab="Sequence Duplication Level", ylab="Relative Scale Where Single Reads Have Value 100", main=curr.batch, ylim=c(0, max(c(100, ceiling(max(duplicates[11, -1]))))))
																								  		        } else {
																											        lines(duplicates[-1, sample.index], col=color.list[i], type="o")
																														       }
																														       legend("right", sample.names, fill=color.list, bty="n", border=color.list, cex=0.6, xpd=TRUE, inset=-0.2)
																														       }
}
dev.off()
HTML(paste("<OBJECT data=\"Sample_Duplication_",curr.batch,".png\" type=\"image/png\">\n</OBJECT>\n", sep=""))
@


<<read.table,echo=FALSE>>=
if (library.type %in% c("PE", "SPE")) {
   total.read.data$Total_Raw_Reads <- total.read.data$R1_Raw_Reads + total.read.data$R2_Raw_Reads
   total.read.data$Total_Aligned_Reads <- total.read.data$R1_Aligned_Reads + total.read.data$R2_Aligned_Reads
   total.read.data$Pct_Aligned_Reads <- 100*total.read.data$Total_Aligned_Reads/total.read.data$Total_Raw_Reads
   print(xtable(total.read.data, caption="Total Number of Reads Summary", digits=c(rep(0,8), 2)), type="html", label="tab:one", table.placement="tbp", caption.placement="top")
   } else {
   total.read.data$Pct_Aligned_Reads <- 100*total.read.data$Aligned_Reads/total.read.data$Raw_Reads
   print(xtable(total.read.data, caption="Total Number of Reads Summary", digits=c(rep(0,4), 2)), type="html", label="tab:one", table.placement="tbp", caption.placement="top")
   }
@

<<read2.table,echo=FALSE>>=
if (library.type %in% c("PE", "SPE")) {
   bamstats.summary <- bamstats.data[c(2:4, 7:14), c(2:length(names(bamstats.data))), drop=FALSE]
   bamstats.summary <- rbind(bamstats.summary, apply(bamstats.data[c(2,14),-1, drop=FALSE], 2, sum))
   row.names(bamstats.summary) <- c(bamstats.data[c(2:4, 7:14), 1], "Total Reads")
   } else {
   bamstats.summary <- bamstats.data[c(2:4, 8:9), c(2:length(names(bamstats.data))), drop=FALSE]
   bamstats.summary <- rbind(bamstats.summary, apply(bamstats.data[c(2,9),-1, drop=FALSE], 2, sum))
   row.names(bamstats.summary) <- c(bamstats.data[c(2:4, 8:9), 1], "Total Reads")
   }
print(xtable(bamstats.summary, caption="Bamtools Reads Summary"), type="html", label="tab:two", table.placement="tbp", caption.placement="top")
@

<<read3.table,echo=FALSE>>=
if (library.type %in% c("PE", "SPE")) {
   bamstats.percent.table <- 100*bamstats.summary[c(1:10), , drop=FALSE] / rep(as.numeric(bamstats.summary[1, ]), each=10)
   } else {
   bamstats.percent.table <- 100*bamstats.summary[c(1:4), , drop=FALSE] / rep(as.numeric(bamstats.summary[1, ]), each=4)
   }
print(xtable(bamstats.percent.table, caption="Bamtools Reads Summary As Percentage of Mapped Reads", digits=2), type="html", label="tab:three", table.placement="tbp", caption.placement="top")
@

<<read4.table,echo=FALSE>>=
if (library.type %in% c("PE", "SPE")) {
   mapped.percent.table <- 100*bamstats.summary[c(1,11), , drop=FALSE] / rep(as.numeric(bamstats.summary[12, ]), each=2)
   } else {
   mapped.percent.table <- 100*bamstats.summary[c(1,5), , drop=FALSE] / rep(as.numeric(bamstats.summary[6, ]), each=2)
   }
print(xtable(mapped.percent.table, caption="Percentage of Mapped/Unmapped Reads", digits=2), type="html", label="tab:four", table.placement="tbp", caption.placement="top")
@

<<read.plot,echo=FALSE,results=hide,fig=FALSE>>=
png(paste("Mapped_Reads_",curr.batch,".png", sep=""), width=4, height=3, units="in", pointsize=6, res=300)
par(mai=c(0.5,0.5,0.5,1))
barplot(as.matrix(mapped.percent.table), beside=FALSE, ylim=c(0,100), col=c("red", "darkblue"), border=NA, main=curr.batch, xlab="Sample", ylab="Percentage of Total Reads", names.arg=c(1:length(names(mapped.percent.table))), cex.axis=0.9)
legend("right", c("Mapped", "Unmapped"), fill=c("red", "darkblue"), border=NA, bty="n", xpd=TRUE, inset=-0.3, cex=1)
dev.off()
HTML(paste("<OBJECT data=\"Mapped_Reads_",curr.batch,".png\" type=\"image/png\">\n</OBJECT>\n", sep=""))
@

<<junction.plot,echo=FALSE,results=hide,fig=FALSE>>=
png(paste("Junction_Spanning_Reads_",curr.batch,".png", sep=""), width=4, height=3, units="in", pointsize=6, res=300)
par(mai=c(0.5,0.5,0.5,1))
barplot(as.matrix(bamstats.percent.table[length(row.names(bamstats.percent.table)), , drop=FALSE]), ylim=c(0, ceiling(max(bamstats.percent.table[length(row.names(bamstats.percent.table)), ]))), col=c("red"), border=NA, main=curr.batch, xlab="Sample", ylab="Percentage of Junction Spanning Reads Among Mapped Reads", names.arg=c(1:length(names(bamstats.percent.table))), cex.axis=0.9)
dev.off()
HTML(paste("<OBJECT data=\"Junction_Spanning_Reads_",curr.batch,".png\" type=\"image/png\">\n</OBJECT>\n", sep=""))
@

<H2>
RnaSeqMetrics Summary
</H2>

The Picard Tools RnaSeqMetrics function computes the number of bases assigned to various classes of RNA. It also computes the coverage of bases across all transcripts (normalized to a same-sized reference). Computations are based on comparison to a refFlat file. Related text files that were saved:
<<rnaseq.files,echo=FALSE>>=
HTML(paste(curr.batch, "_rnaseqmetrics_summary.txt <br>", curr.batch, "_rnaseqmetrics_hist.txt <br><br>", sep=""))
@

<<summary.table,echo=FALSE>>=
sum.data <- summary.data[c(1:2,4:10,12:22), c(2:length(names(summary.data))), drop=FALSE]
row.names(sum.data) <- summary.data[c(1:2,4:10,12:22), 1]
table.digits <- matrix(c(rep(0,9),rep(3,11)), nrow=20, ncol=length(names(summary.data)))
print(xtable(sum.data, caption="Reference Genome Mapped Reads Summary", digits=table.digits), type="html", label="tab:five", table.placement="tbp", caption.placement="top")
@

<<metrics.plot,echo=FALSE,results=hide,fig=FALSE>>=
png(paste("Base_Type_",curr.batch,".png", sep=""), width=4, height=3, units="in", pointsize=6, res=300)
par(mai=c(0.5,0.5,0.5,0.5))
barplot(as.matrix(sum.data[c(14,12,13), , drop=FALSE])*100, beside=TRUE, ylim=c(0,100), col=c("red", "darkblue", "darkgreen"), border=NA, main=curr.batch, xlab="Sample", ylab="Percentage of Total Mapped Bases", names.arg=c(1:length(names(sum.data))))
legend("right", c("mRNA", "Intronic", "Intergenic"), fill=c("red", "darkblue", "darkgreen"), border=NA, bty="n", xpd=TRUE, inset=-0.17, cex=0.8)
dev.off()
HTML(paste("<OBJECT data=\"Base_Type_",curr.batch,".png\" type=\"image/png\">\n</OBJECT>\n", sep=""))
@

<<coverage.plot,echo=FALSE,results=hide>>=
sample.names <- names(metrics.data)[2:length(names(metrics.data))]
delta <- 1/(2*length(sample.names))
c <- rep(brewer.pal(12,"Paired"), length(sample.names))
png(paste("Normalized_Coverage_",curr.batch,".png", sep=""), width=4, height=3, units="in", pointsize=6, res=300)
par(mai=c(0.5,0.5,0.5,1))
y.max <- max(metrics.data[ ,c(2:(length(sample.names)+1)), drop=FALSE])
for (i in c(1:length(sample.names))){
      sample.index <- i+1
      if (i==1) {
         plot(metrics.data[ ,1], metrics.data[,sample.index], type="l", col=c[i], xlab="Normalized Position", ylab="Normalized Coverage", main=curr.batch, bty='L', ylim=c(0,y.max))
      } else {
         shifted = metrics.data[,1]+delta*(i-1)
         lines(shifted, metrics.data[,sample.index], col=c[i])
      }
}
legend("right", sample.names, fill = c, bty="n", border=c, cex=0.8, xpd=TRUE, inset=-0.3)
dev.off()
HTML(paste("<OBJECT data=\"Normalized_Coverage_",curr.batch,".png\" type=\"image/png\">\n</OBJECT>\n", sep=""))
@



<<insert.files,echo=FALSE>>=
if (library.type %in% c("PE", "SPE")) {
   HTML("<H2> InsertSizeMetrics Summary </H2>")
   HTML("For paired-end data, the Picard Tools CollectInsertSizeMetrics function was used to compute the distribution of insert sizes in the accepted_hits.bam file and create a histogram. Related text files that were saved: ")
   HTML(paste(curr.batch, "_insertmetrics_summary.txt <br>", sep=""))
   }
@

<<insert.summary.table,echo=FALSE>>=
if (library.type %in% c("PE", "SPE")) {
   insert.sum.data <- apply(insert.summary.data[c(1:7), c(2:length(names(insert.summary.data))), drop=FALSE], 2, as.numeric)
   row.names(insert.sum.data) <- insert.summary.data[c(1:7), 1]
   table.digits <- matrix(c(rep(0,4),rep(2,2),0), nrow=7, ncol=length(names(insert.summary.data)))
   print(xtable(insert.sum.data, caption="Insert Size Summary", digits=table.digits), type="html", label="tab:six", table.placement="tbp", caption.placement="top")
   }
@

<<median.insert.plot,echo=FALSE,results=hide,fig=FALSE>>=
if (library.type %in% c("PE", "SPE")) {
   png(paste("Median_Insert_Size_",curr.batch,".png", sep=""), width=4, height=3, units="in", pointsize=6, res=300)
   par(mai=c(0.5,0.5,0.5,1))
   barplot(insert.sum.data[1, , drop=FALSE], ylim=c(0, max(insert.sum.data[1, ])+100), col=c("red"), border=NA, main=curr.batch, xlab="Sample", ylab="Median Insert Size", names.arg=c(1:length(sample.names)), cex.axis=0.9)
   dev.off()
   HTML(paste("<OBJECT data=\"Median_Insert_Size_",curr.batch,".png\" type=\"image/png\">\n</OBJECT>\n", sep=""))
   }
@

<<read.plot,echo=FALSE,results=hide,fig=FALSE>>=
if (library.type %in% c("PE", "SPE")) {
   png(paste("Insert_Size_",curr.batch,".png", sep=""), width=4, height=3, units="in", pointsize=6, res=300)
   delta <- 1/(2*length(sample.names))
   c <- rep(brewer.pal(12,"Paired"), length(sample.names))
   y.max <- max(insert.metrics.data[ ,-1, drop=FALSE], na.rm=TRUE)
   for (i in c(1:length(sample.names))){
         sample.index <- i+1
	 	        if (i==1) {
			   	   plot(insert.metrics.data[ ,1], insert.metrics.data[ ,sample.index], type="l", col=c[i], xlab="Insert Size", ylab="Read Count", main=curr.batch, bty='L', ylim=c(0,y.max), xlim=c(0, 2000))
				   			       } else {
							       	       shifted = insert.metrics.data[ ,1]+delta*(i-1)
								       	       	  lines(shifted, insert.metrics.data[ ,sample.index], col=c[i])
										  		   }
												   }
												   legend("topright", sample.names, fill = c, bty="n", border=c, cex=0.8)
												   dev.off()
												   HTML(paste("<OBJECT data=\"Insert_Size_",curr.batch,".png\" type=\"image/png\">\n</OBJECT>\n", sep=""))
												   }
@


<H2> 
Reads per Chromosome
</H2>

Samtools produces a summary document that includes the number of reads mapped to each chromosome. Related text files that were saved:
<<chr.count.files,echo=FALSE>>=
HTML(paste(curr.batch, "_counts.txt <br>", sep=""))
@

<<count.plot.data,echo=FALSE>>=
sample.names <- names(counts.data)[3:length(names(counts.data))]
delta <- 1/(2*length(sample.names))
c <- rep(brewer.pal(12,"Paired"), length(sample.names))
if (genome=="hg19") {
   counts.data <- counts.data[order(counts.data[, 1]), , drop=FALSE]
   counts.data.chr.order <- order(as.numeric(levels(counts.data[1:22,1])[as.integer(counts.data[1:22,1])]))
   counts.data.ordered.by.chr <- counts.data[1:22, ][counts.data.chr.order, ]
   counts.data.ordered.by.chr <- rbind(counts.data.ordered.by.chr, counts.data[25:26, ], counts.data[23:24, ])
   HTML("For human, the hg19 assembly was used. We estimate the number of rRNA reads as those mapped to chrM plus chrUn_gl000220, corresponding to 12S, 16S and 5.8S rRNA. The 'Other' category contains all other chr*_random and chrUn_* available.")
   } else if (genome=="mm10") {
   counts.data <- counts.data[order(counts.data[c(1:23), 1]), ]
   counts.data.chr.order <- order(as.numeric(levels(counts.data[1:19,1])[as.integer(counts.data[1:19,1])]))
   counts.data.ordered.by.chr <- counts.data[1:19, ][counts.data.chr.order, ]
   counts.data.ordered.by.chr <- rbind(counts.data.ordered.by.chr, counts.data[c(22,23,20,21), ])
   HTML("For mouse, the GRCm38 assmembly was used. It includes approximately 2.6 Gb of sequence and is considered to be 'essentially complete'. Data are provided for chromosomes 1-19, X, Y, M (mitochondrial DNA) and chr*_random (unlocalized) and chrUn_* (unplaced clone contigs). The latter two categories are summarized as 'Other' in the table and plot below. For information about the process used to assemble mm10, please see the GRC website (http://www.ncbi.nlm.nih.gov/projects/genome/assembly/grc/mouse/).")
   } else if (genome=="Zv9") {
   counts.data <- counts.data[order(counts.data[, 1]), ]
   counts.data.chr.order <- order(as.numeric(levels(counts.data[1:25,1])[as.integer(counts.data[1:25,1])]))
   counts.data.ordered.by.chr <- counts.data[1:25, ][counts.data.chr.order, ]
   counts.data.ordered.by.chr <- rbind(counts.data.ordered.by.chr, counts.data[26:27, ])
   HTML("For zebrafish, the Zv9 assembly comprises a sequence length of 1.4 Gb in 26 chromosomes (labels 1-25 and MT) and 1,107 scaffolds (merged into label 'Other').")
   }
@

<<count.plot,echo=FALSE,results=hide,fig=FALSE>>=
png(paste("Coverage_by_Chr_",curr.batch,".png", sep=""),  width=4, height=3, units="in", pointsize=6, res=300)
par(lwd=20*delta,mai=c(0.5,0.5,0.5,1))
for (i in c(1:length(sample.names))){
      sample.index <- i+2
      if (i==1) {
         plot(counts.data.ordered.by.chr[,sample.index], type="h", col=c[i], xlab="Chromosome", ylab="Read Counts", main=curr.batch, axes=FALSE, ylim=c(0, max(counts.data[,c(3:length(names(counts.data)))])))
      } else {
         shifted = c(1:length(counts.data[,1]))+delta*(i-1)
         lines(shifted, counts.data.ordered.by.chr[,sample.index], type="h", col=c[i])
      }
}
axis(side=1, labels=counts.data.ordered.by.chr[ ,1], at=c(1:length(counts.data[,1])), cex.axis=0.55)
axis(side=2)
legend("right", sample.names, fill=c, bty="n", border=c, cex=0.8, xpd=TRUE, inset=-0.2)
dev.off()
HTML(paste("<OBJECT data=\"Coverage_by_Chr_",curr.batch,".png\" type=\"image/png\">\n</OBJECT>\n", sep=""))
@


<<label=tab2,echo=FALSE>>=
#Add in the total row at bottom
count.total <- colSums(counts.data.ordered.by.chr[ , c(3:length(names(counts.data))), drop=FALSE])
count.total.table <- counts.data.ordered.by.chr[ , c(3:length(names(counts.data))), drop=FALSE]
count.total.table <- rbind(count.total.table, count.total)
row.names(count.total.table) <- c(levels(counts.data.ordered.by.chr[,1])[as.integer(counts.data.ordered.by.chr[, 1])], "Total")
print(xtable(count.total.table, caption="Mapped Reads to Reference Genome", digits=0, align=rep("r", dim(count.total.table)[2]+1)), type="html", label="tab:seven", table.placement="tbp", caption.placement="top")
@

<<count.percent,echo=FALSE>>=
counts.percent.table <- 100*counts.data.ordered.by.chr[ , c(3:length(names(counts.data))), drop=FALSE] / rep(count.total, each=nrow(counts.data.ordered.by.chr[, c(3:length(names(counts.data)))])) 
counts.percent.table <- rbind(counts.percent.table, colSums(counts.percent.table))
row.names(counts.percent.table) <- c(levels(counts.data.ordered.by.chr[,1])[as.integer(counts.data.ordered.by.chr[, 1])], "Total")
print(xtable(counts.percent.table, caption="Percent of Total Reads Mapped to Reference Genome", digits=2, align=rep("r", dim(counts.percent.table)[2]+1)), type="html", label="tab:eight", table.placement="tbp", caption.placement="top")
@

<H2>
ERCC Spike-in Dose Response Plots
</H2>

For samples that contained External RNA Controls Consortium (ERCC) Spike-Ins, dose response curves (i.e. plots of ERCC transcript FPKM vs. ERCC transcript molecules) were created. Ideally, the slope and R2 would equal 1.0. Related text files that were saved:
<<ercc.files,echo=FALSE>>=
HTML(paste(curr.batch, "_ERCC.txt <br>", sep=""))
HTML(paste(curr.batch,"_ERCC_FPKM.txt", sep=""))
HTML(paste(curr.batch,"_ERCC_RAW_COUNTS.txt", sep=""))

@


<<ercc.plot,echo=FALSE>>=
if ("1" %in% ercc.mixes | "2" %in% ercc.mixes) {
n.samples <- (dim(ercc.data)[2]-1)/2
dilution.factor <- 0.02
ambion.specs <- read.table("/proj/sadevs/sadev01/tool-data/Ambion_Documents/ercc/ERCC_SpikeIn_Controls_Analysis.txt", header=T, as.is=T, sep='\t')
ercc <- merge(ambion.specs, ercc.data, by.x="ERCC.ID", by.y="SpikeIn", all.x=TRUE)
ercc$concentration.in.Mix.1..attomoles.ul. <- ercc$concentration.in.Mix.1..attomoles.ul. * dilution.factor
ercc$concentration.in.Mix.2..attomoles.ul. <- ercc$concentration.in.Mix.2..attomoles.ul. * dilution.factor
sample.names <- grep("fpkm", names(ercc))
r2.all <- NULL
slope.all <- NULL
names.all <- NULL
for (i in c(1:length(sample.names))){
      sample.index <- sample.names[i]
      curr.sample.name <- strsplit(names(ercc)[sample.index], "_fpkm")[[1]]
      curr.ercc.mix <- ercc.mixes[i]
      if (curr.ercc.mix=="1") {
         mix <- "concentration.in.Mix.1..attomoles.ul."
      } else if (curr.ercc.mix=="2") {
         mix <- "concentration.in.Mix.2..attomoles.ul."
      } else {
         next
      }   
      png(paste("Dose_Response_ERCC_",curr.sample.name,".png", sep=""), width=2.5, height=2.5, units="in", pointsize=6, res=300)
      plot(log2(ercc[, mix]), log2(ercc[, sample.index]), col="darkblue", xlab=paste("Log2 ERCC Mix",curr.ercc.mix," attomoles per ug RNA", sep=""), ylab="Log2 FPKM", main=curr.sample.name, ylim=c(-10, 30))
      ercc.no.inf <- subset(ercc, ercc[ ,sample.index] != 0)
      linear.fit <- lm(log2(ercc.no.inf[ ,sample.index])~log2(ercc.no.inf[, mix]))
      abline(linear.fit, col="red")
      slope <- as.numeric(linear.fit$coefficients[2])
      r2 <- summary(linear.fit)$r.squared
      text(2.5, -5, pos=4, sprintf("Slope: %.2f\nR-sq: %.2f",slope, r2))
      dev.off()
      r2.all <- rbind(r2.all, r2)
      slope.all <- rbind(slope.all, slope)
      names.all <- rbind(names.all, curr.sample.name)
      HTML(paste("<OBJECT data=\"Dose_Response_ERCC_",curr.sample.name,".png\" type=\"image/png\">\n</OBJECT>\n", sep=""))
}
ercc.fit.table <- data.frame(cbind(slope.all, r2.all), row.names=names.all)
names(ercc.fit.table) <- c("Slope", "r2")
print(xtable(ercc.fit.table, caption="ERCC Spike-in Dose Response Fit Details"), type="html", label="tab:nine", table.placement="tbp", caption.placement="top")
names(ercc)[4:5] <- c("Mix1.Concentration", "Mix2.Concentration")
write.table(ercc, file=paste(curr.batch,"_ERCC_complete.txt", sep=""), row.names=FALSE, quote=FALSE)
}
@


<<ercc.table.fpkm,echo=FALSE>>=
if ("1" %in% ercc.mixes | "2" %in% ercc.mixes) {
fpkm.cols <- grep("fpkm", names(ercc))
ercc.fpkm <- ercc[, c(1, 4, 5, fpkm.cols)]
names(ercc.fpkm)[2:3] <- c("Mix1.Concentration", "Mix2.Concentration") 
#print(xtable(ercc.fpkm, caption="ERCC Spike-in Transcript FPKM per Sample"), type="html", label="tab:ten", table.placement="tbp", caption.placement="top")
write.table(ercc.fpkm, file=paste(curr.batch,"_ERCC_FPKM.txt", sep=""), row.names=FALSE, quote=FALSE)
}
@

<<ercc.table.raw,echo=FALSE>>=
if ("1" %in% ercc.mixes | "2" %in% ercc.mixes) {
raw.cols <- grep("raw", names(ercc))
ercc.raw <- ercc[, c(1, 4, 5, raw.cols)]
names(ercc.raw)[2:3] <- c("Mix1.Concentration", "Mix2.Concentration") 
#print(xtable(ercc.raw, caption="ERCC Spike-in Raw Read Counts per Sample"), type="html", label="tab:eleven", table.placement="tbp", caption.placement="top")
write.table(ercc.raw, file=paste(curr.batch,"_ERCC_RAW_COUNTS.txt", sep=""), row.names=FALSE, quote=FALSE)
}
@
</Body>
</HTML>
